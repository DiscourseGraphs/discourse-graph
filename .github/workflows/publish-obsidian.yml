name: Publish Obsidian Plugin

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0-beta.1)'
        required: true
      create_release:
        description: 'Create a GitHub release'
        type: boolean
        default: true
      is_prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: true
env:
  OBSIDIAN_PLUGIN_REPO_TOKEN: ${{ secrets.OBSIDIAN_PLUGIN_REPO_TOKEN }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build Obsidian plugin
        run: |
          # Run the build using turbo
          echo "Running Obsidian build with Turborepo..."
          npx turbo run build --filter=@discourse-graphs/obsidian
          
          # Debug the current directory structure
          echo "Current workspace directory: $(pwd)"
          echo "Directory structure after build:"
          find . -type d -name "dist" | sort
          
          # Find all main.js files to understand possible build outputs
          echo "Finding potential build artifacts:"
          find . -name "main.js" | sort
          find . -name "styles.css" | sort
          find . -name "manifest.json" | sort
        
      - name: Prepare repository content
        run: |
          # Create temporary directory
          mkdir -p temp-repo
          
          # Based on examining compile.ts, the build outputs should be in:
          # - apps/obsidian/dist/main.js
          # - apps/obsidian/dist/styles.css
          # - apps/obsidian/dist/manifest.json
          
          # Debug the build output locations
          echo "Build output locations:"
          for file in main.js styles.css manifest.json; do
            echo "Looking for $file in dist directories:"
            find . -path "*/dist/$file" | sort
          done
          
          echo "Copying Obsidian files"
          cp -r apps/obsidian/* temp-repo/ || echo "Warning: Some files could not be copied"

          # Find the most likely build output directory
          BUILD_DIR=$(find . -path "*/dist/main.js" -exec dirname {} \; | head -n 1)
          if [ -n "$BUILD_DIR" ]; then
            echo "Found build directory: $BUILD_DIR"
            echo "Contents of $BUILD_DIR:"
            ls -la "$BUILD_DIR"
            
            # Copy files from the build directory
            echo "Copying build files to temp-repo..."
            cp "$BUILD_DIR"/main.js temp-repo/ || echo "Error copying main.js"
            cp "$BUILD_DIR"/styles.css temp-repo/ || echo "Error copying styles.css (might not exist if no styles)"
            cp "$BUILD_DIR"/manifest.json temp-repo/ || echo "Error copying manifest.json"
          else
            echo "No build directory with main.js found! Detailed search results:"
            find . -name "main.js" -ls
            
            # Try to find the files individually as a fallback
            echo "Attempting to locate files individually as fallback..."
            MAIN_JS=$(find . -name "main.js" | grep -v "node_modules" | head -n 1)
            STYLES_CSS=$(find . -name "styles.css" | grep -v "node_modules" | head -n 1)
            MANIFEST_JSON=$(find . -name "manifest.json" | grep -v "node_modules" | head -n 1)
            
            if [ -n "$MAIN_JS" ]; then
              echo "Found main.js at: $MAIN_JS"
              cp "$MAIN_JS" temp-repo/
            else
              echo "ERROR: Could not find main.js!"
              exit 1
            fi
            
            if [ -n "$STYLES_CSS" ]; then
              echo "Found styles.css at: $STYLES_CSS"
              cp "$STYLES_CSS" temp-repo/
            else
              echo "Warning: Could not find styles.css (this might be ok if the plugin has no styles)"
            fi
            
            if [ -n "$MANIFEST_JSON" ]; then
              echo "Found manifest.json at: $MANIFEST_JSON"
              cp "$MANIFEST_JSON" temp-repo/
            else
              echo "ERROR: Could not find manifest.json!"
              exit 1
            fi
          fi
          
          # Update version in manifest.json
          if [ -f "temp-repo/manifest.json" ]; then
            jq '.version = "${{ github.event.inputs.version }}"' temp-repo/manifest.json > temp.json && mv temp.json temp-repo/manifest.json
            echo "Updated manifest.json with version ${{ github.event.inputs.version }}"
          else
            echo "ERROR: manifest.json not found in temp-repo!"
            exit 1
          fi
          
          # Verify the final content
          echo "Final contents of temp-repo:"
          ls -la temp-repo
      
      - name: Push to Obsidian plugin repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.OBSIDIAN_PLUGIN_REPO_TOKEN }}
        with:
          source-directory: 'temp-repo'
          destination-github-username: 'DiscourseGraphs'
          destination-repository-name: 'discourse-graph-obsidian'
          user-email: 'actions@github.com'
          target-branch: main
          
      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          repository: 'DiscourseGraphs/discourse-graph-obsidian'
          token: ${{ secrets.OBSIDIAN_PLUGIN_REPO_TOKEN }}
          tag_name: v${{ github.event.inputs.version }}
          name: Discourse Graph v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.is_prerelease }}
          files: |
            temp-repo/main.js
            temp-repo/manifest.json
            temp-repo/styles.css

      - name: Update version in manifest.json
        run: |
          jq '.version = "${{ github.event.inputs.version }}"' apps/obsidian/manifest.json > temp.json && mv temp.json apps/obsidian/manifest.json
          echo "Updated manifest.json with version ${{ github.event.inputs.version }}"
