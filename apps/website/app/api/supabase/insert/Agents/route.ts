import { createClient } from "@/utils/supabase/server";
import { NextResponse, NextRequest } from "next/server";
import type { SupabaseClient } from "@supabase/supabase-js";
import cors from "~/utils/llm/cors"; // Adjust path if needed

interface AgentDataInput {
  type: string; // e.g., "Person", "Organization", "Software"
  // Add any other fields directly belonging to the Agent table that are mandatory
  // or that you want to set at creation time.
  // For now, 'type' is the primary one from LinkML.
}

// interface AgentResult { // Or just return the agent object or a simple wrapper
//   agent: { id: number; type: string; [key: string]: any } | null;
//   error: string | null;
//   details?: string;
// }

async function createAgentEntry(
  supabase: SupabaseClient<any, "public", any>,
  agentData: AgentDataInput,
): Promise<{
  agent: { id: number; type: string; [key: string]: any } | null;
  error: string | null;
  details?: string;
}> {
  const { type } = agentData;

  if (!type || typeof type !== "string" || type.trim() === "") {
    return {
      agent: null,
      error: "Missing or invalid 'type' for Agent",
      details: "Agent 'type' is required.",
    };
  }

  // Check if an agent with this type already exists?
  // This depends on your business logic. If type should be unique, add a check.
  // For now, we assume we always create a new agent.
  // The ID is auto-generated by the database.

  const agentToInsert = {
    type,
    // any other default fields for Agent table
  };

  const { data: newAgent, error: insertError } = await supabase
    .from("Agents") // Ensure this table name is correct in your Supabase schema
    .insert(agentToInsert)
    .select("id, type") // Select id and type, or '*' if you want all columns
    .single();

  if (insertError) {
    console.error(`Error inserting new Agent (type: ${type}):`, insertError);
    // Check for specific errors, e.g., if 'type' has a unique constraint
    if (insertError.code === "23505") {
      // Unique constraint violation
      return {
        agent: null,
        error: `An Agent with type '${type}' might already exist or violates a unique constraint.`,
        details: insertError.message,
      };
    }
    return {
      agent: null,
      error: "Database error while inserting Agent",
      details: insertError.message,
    };
  }

  if (!newAgent || newAgent.id === null || newAgent.id === undefined) {
    // This case should ideally be caught by insertError, but as a safeguard:
    console.error(
      `New agent not returned or ID is null after insert (type: ${type})`,
      newAgent,
    );
    return {
      agent: null,
      error: "Failed to retrieve new Agent ID after insert.",
      details:
        "The insert operation might have appeared successful but returned no data or ID.",
    };
  }

  console.log("Created new Agent:", newAgent);
  return { agent: newAgent, error: null };
}

export async function POST(request: NextRequest) {
  const supabase = await createClient();
  let response: NextResponse;

  try {
    const body: AgentDataInput = await request.json();

    if (
      !body.type ||
      typeof body.type !== "string" ||
      body.type.trim() === ""
    ) {
      response = NextResponse.json(
        { error: "Missing or invalid type for Agent" },
        { status: 400 },
      );
      return cors(request, response);
    }

    const result = await createAgentEntry(supabase, body);

    if (result.error || !result.agent) {
      console.error(
        `API Error during Agent creation (type: ${body.type}): ${result.error}`,
        result.details || "",
      );
      const clientError = result.error?.startsWith("Database error")
        ? "An internal error occurred."
        : result.error;
      const statusCode = result.error?.includes("already exist") ? 409 : 500;
      response = NextResponse.json(
        { error: clientError, details: result.details },
        { status: statusCode },
      );
    } else {
      response = NextResponse.json(result.agent, { status: 201 }); // Agent created
    }
  } catch (e: any) {
    console.error("API route error in /api/supabase/insert/Agents:", e);
    if (e instanceof SyntaxError && e.message.toLowerCase().includes("json")) {
      response = NextResponse.json(
        { error: "Invalid JSON in request body" },
        { status: 400 },
      );
    } else {
      response = NextResponse.json(
        { error: "An unexpected error occurred" },
        { status: 500 },
      );
    }
  }
  return cors(request, response);
}

export async function OPTIONS(request: NextRequest) {
  const response = new NextResponse(null, { status: 204 });
  return cors(request, response);
}
